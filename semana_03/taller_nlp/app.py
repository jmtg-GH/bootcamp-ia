# 1. Importamos 'request' para poder leer los datos del formulario.
from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

# 2. A√±adimos methods=['GET', 'POST'] a la ruta del chatbot.
@app.route('/chatbot-salud', methods=['GET', 'POST'])
def chatbot_salud():
    # 3. Creamos una variable para la respuesta, inicialmente vac√≠a.
    respuesta = None

    # 4. Si el usuario envi√≥ el formulario (m√©todo POST)...
    if request.method == 'POST':
        # Obtenemos los s√≠ntomas del formulario.
        sintomas = request.form['sintomas']
        
        # Convertimos el texto a min√∫sculas para una detecci√≥n m√°s fiable.
        sintomas_lower = sintomas.lower()

        # --- L√≥gica del "Detector de Palabras" ---
        if 'fiebre' in sintomas_lower:
            respuesta = "Parece que tienes fiebre. Te recomiendo descansar, tomar l√≠quidos y monitorizar tu temperatura. Si persiste, consulta a un m√©dico."
        elif 'cabeza' in sintomas_lower:
            respuesta = "Para un dolor de cabeza, puedes probar a descansar en un lugar tranquilo y oscuro. Beber agua tambi√©n ayuda. Si es muy intenso o recurrente, es mejor ver a un m√©dico."
        elif 'est√≥mago' in sintomas_lower or 'panza' in sintomas_lower:
            respuesta = "Si te duele el est√≥mago, intenta comer alimentos suaves y evitar comidas pesadas o grasosas. Si el dolor es fuerte o no se va, consulta a un profesional."
        else:
            respuesta = "No reconozco esos s√≠ntomas. Recuerda que soy un bot simple. Para cualquier problema de salud, lo m√°s seguro es consultar a un m√©dico."

    # 5. Renderizamos la misma plantilla, pero ahora le pasamos la variable 'respuesta'.
    #    Si es una petici√≥n GET, 'respuesta' ser√° None.
    #    Si es POST, contendr√° el mensaje que calculamos.
    return render_template('chatbot_salud.html', respuesta=respuesta)

@app.route('/asistente-clima', methods=['GET', 'POST'])
def asistente_clima():
    respuesta_clima = None

    if request.method == 'POST':
        # Usamos el 'name' del textarea de clima.html
        pregunta = request.form['pregunta_clima']
        pregunta_lower = pregunta.lower()

        # --- L√≥gica de Clasificaci√≥n de Intenci√≥n ---
        if 'llover' in pregunta_lower or 'lluvia' in pregunta_lower:
            respuesta_clima = "Parece que podr√≠a llover. Te recomiendo llevar paraguas por si acaso. ‚òî"
        elif 'calor' in pregunta_lower or 'sol' in pregunta_lower:
            respuesta_clima = "S√≠, parece que ser√° un d√≠a caluroso. ¬°No olvides mantenerte hidratado y usar protector solar! ‚òÄÔ∏è"
        elif 'fr√≠o' in pregunta_lower:
            respuesta_clima = "Se espera un d√≠a fr√≠o. ¬°Aseg√∫rate de abrigarte bien si vas a salir! üß£"
        elif 'nublado' in pregunta_lower:
            respuesta_clima = "El cielo estar√° mayormente nublado. Un d√≠a perfecto para una bebida caliente. ‚òÅÔ∏è"
        else:
            respuesta_clima = "No tengo informaci√≥n sobre eso, pero te deseo que tengas un excelente d√≠a."

    # Renderizamos la plantilla del clima, pas√°ndole la respuesta.
    return render_template('clima.html', respuesta_clima=respuesta_clima)

@app.route('/clasificador-animales', methods=['GET', 'POST'])
def clasificador_animales():
    animal_adivinado = None

    if request.method == 'POST':
        descripcion = request.form['descripcion']
        desc_lower = descripcion.lower()

        # --- L√≥gica del Detective (Sistema de Reglas) ---
        # Para adivinar "perro", necesitamos ambas pistas.
        if ('cuatro patas' in desc_lower or '4 patas' in desc_lower) and 'ladra' in desc_lower:
            animal_adivinado = "Creo que est√°s hablando de un perro üêï"
        # Para adivinar "gato", necesitamos ambas pistas.
        elif 'maulla' in desc_lower and 'dormir' in desc_lower:
            animal_adivinado = "Creo que est√°s hablando de un gato üêà"
        # Para adivinar "p√°jaro", necesitamos ambas pistas.
        elif 'vuela' in desc_lower and 'alas' in desc_lower:
            animal_adivinado = "Creo que est√°s hablando de un p√°jaro üê¶"
        else:
            animal_adivinado = "¬°Uhm, no estoy seguro! No conozco a ese animal. ü§î"

    # Renderizamos la plantilla, pas√°ndole nuestra adivinanza.
    return render_template('animales.html', animal_adivinado=animal_adivinado)

@app.route('/pedidos-comida', methods=['GET', 'POST'])
def pedidos_comida():
    confirmacion_pedido = None

    if request.method == 'POST':
        pedido = request.form['pedido_usuario']
        pedido_lower = pedido.lower()

        # --- L√≥gica de Extracci√≥n de Entidades ---
        # Buscamos la entidad "comida" en el texto.
        if 'pizza' in pedido_lower:
            # Si encontramos la entidad, creamos una respuesta espec√≠fica.
            confirmacion_pedido = "¬°Pedido recibido! Tu pizza üçï est√° en preparaci√≥n."
        elif 'hamburguesa' in pedido_lower:
            confirmacion_pedido = "¬°Pedido recibido! Tu hamburguesa üçî est√° en preparaci√≥n."
        elif 'pasta' in pedido_lower:
            confirmacion_pedido = "¬°Pedido recibido! Tu plato de pasta üçù est√° en preparaci√≥n."
        elif 'ensalada' in pedido_lower:
            confirmacion_pedido = "¬°Pedido recibido! Tu ensalada ü•ó est√° en preparaci√≥n."
        else:
            # Si no encontramos ninguna entidad conocida, damos una respuesta gen√©rica.
            confirmacion_pedido = "Lo siento, no tenemos eso en el men√∫. Por favor, intenta con pizza, hamburguesa, pasta o ensalada."

    # Renderizamos la plantilla, pas√°ndole la confirmaci√≥n.
    return render_template('pedidos.html', confirmacion_pedido=confirmacion_pedido)

@app.route('/recordatorios', methods=['GET', 'POST'])
def recordatorios():
    confirmacion_recordatorio = None

    if request.method == 'POST':
        frase = request.form['frase_recordatorio']
        frase_lower = frase.lower()

        # --- L√≥gica de Extracci√≥n de Entidades con split() ---
        # Verificamos que las palabras clave existan para evitar errores.
        # Usamos ' a las ' con espacios para ser m√°s precisos.
        if 'recu√©rdame' in frase_lower and ' a las ' in frase_lower:
            try:
                # Dividimos la frase en dos partes usando ' a las ' como separador.
                partes = frase_lower.split(' a las ')
                
                # La primera parte contiene la acci√≥n. Le quitamos "recu√©rdame" y espacios extra.
                accion = partes[0].replace('recu√©rdame', '').strip()
                
                # La segunda parte es la hora. Le quitamos espacios extra.
                hora = partes[1].strip()

                # Creamos el mensaje de confirmaci√≥n.
                confirmacion_recordatorio = f"‚úÖ ¬°Entendido! He guardado un recordatorio para '{accion}' a las {hora}."
            except IndexError:
                # Esto es por si algo sale mal con el split.
                confirmacion_recordatorio = "‚ùå Hubo un problema al entender tu frase. Int√©ntalo de nuevo."
        else:
            # Si el formato no es el esperado.
            confirmacion_recordatorio = "‚ùå No entend√≠ el formato. Por favor, usa una frase como 'Recu√©rdame [acci√≥n] a las [hora]'."

    # Renderizamos la plantilla, pas√°ndole la confirmaci√≥n.
    return render_template('recordatorios.html', confirmacion_recordatorio=confirmacion_recordatorio)

if __name__ == '__main__':
    app.run(debug=True)